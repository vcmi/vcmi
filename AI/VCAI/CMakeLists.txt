if(FL_FOUND)
	include_directories(${FL_INCLUDE_DIRS})
else()
	include_directories(${CMAKE_HOME_DIRECTORY}/AI/FuzzyLite/fuzzylite)
endif()
include_directories(${Boost_INCLUDE_DIRS} ${CMAKE_HOME_DIRECTORY} ${CMAKE_HOME_DIRECTORY}/include ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_HOME_DIRECTORY}/lib)

set(VCAI_SRCS
		StdInc.cpp

		AIUtility.cpp
		Fuzzy.cpp
		SectorMap.cpp
		Goals/Goal.cpp
		Goals/Build.cpp
		Goals/Defence.cpp
		Goals/Explore.cpp
		Goals/Conquer.cpp
		Goals/CaptureObjects.cpp
		Goals/GatherArmy.cpp
		Goals/Win.cpp
		Goals/VisitNearestTown.cpp
		Tasks/Task.cpp
		Tasks/RecruitHero.cpp
		Tasks/BuildStructure.cpp
		Tasks/VisitTile.cpp
		Tasks/BuyArmyInTown.cpp
		VCAI.cpp
		main.cpp
)

set(VCAI_HEADERS
		StdInc.h

		AIUtility.h
		Fuzzy.h
		SectorMap.h
		Goals/Goal.h
		Goals/Build.h
		Goals/Defence.h
		Goals/VisitNearestTown.h
		Goals/Explore.h
		Goals/Conquer.h
		Goals/CaptureObjects.h
		Goals/GatherArmy.h
		Goals/Win.h
		Tasks/Task.h
		Tasks/RecruitHero.h
		Tasks/BuildStructure.h
		Tasks/VisitTile.h
		Tasks/BuyArmyInTown.h
		VCAI.h
)

assign_source_group(${VCAI_SRCS} ${VCAI_HEADERS})

if(ANDROID) # android compiles ai libs into main lib directly, so we skip this library and just reuse sources list
	return()
endif()

add_library(VCAI SHARED ${VCAI_SRCS} ${VCAI_HEADERS})
if(FL_FOUND)
	target_link_libraries(VCAI ${FL_LIBRARIES} vcmi)
else()
	target_link_libraries(VCAI fl-static vcmi)
endif()

vcmi_set_output_dir(VCAI "AI")

set_target_properties(VCAI PROPERTIES ${PCH_PROPERTIES})
cotire(VCAI)

install(TARGETS VCAI RUNTIME DESTINATION ${AI_LIB_DIR} LIBRARY DESTINATION ${AI_LIB_DIR})
